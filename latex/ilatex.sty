\ProvidesPackage{ilatex}[2020/04/16 iLaTeX]
\RequirePackage{etoolbox}
\RequirePackage{environ}
\RequirePackage[abspath]{currfile}
\RequirePackage{pdfcomment}
\RequirePackage{graphicx}
\RequirePackage{amsmath}


% Create an output file named '.ilatex-mappings'
% to write information about certain commands
% (e.g. path of the source file, line number)
% when they are processed the LaTeX engine
\newwrite\Output@ilatex
\immediate\openout\Output@ilatex={\jobname.ilatex-mappings}


% Create a counter to generate identifiers
% that are used to link a piece of code with a PDF annotation
\newcounter{Annotation@ilatex}
\setcounter{Annotation@ilatex}{1}


% Define a command to convert and print a length
% From https://tex.stackexchange.com/a/8337
\def\convertto#1#2{\strip@pt\dimexpr #2*65536/\number\dimexpr 1#1}


% Define a command to write a new mapping between
% a line in a source file and an identifier
% in the output file created above
\newcommand{\WriteMapToCurrentLine@ilatex}[1]{%
    % Important values about the mapping
    \immediate\write\Output@ilatex{type #1}%
    \immediate\write\Output@ilatex{path \currfileabspath}%
    \immediate\write\Output@ilatex{line \the\inputlineno}%
    \immediate\write\Output@ilatex{id \theAnnotation@ilatex}%
    % Context data which might be useful for some visualisations
    % (e.g. current values of certain dimension macros to convert relative lengths)
    \immediate\write\Output@ilatex{graphicspath \graphicspath@ilatex}%
    \immediate\write\Output@ilatex{length_macro_paperwidth \convertto{pt}{\paperwidth}}%
    \immediate\write\Output@ilatex{length_macro_paperheight \convertto{pt}{\paperheight}}%
    \immediate\write\Output@ilatex{length_macro_textwidth \convertto{pt}{\textwidth}}%
    \immediate\write\Output@ilatex{length_macro_textheight \convertto{pt}{\textheight}}%
    \immediate\write\Output@ilatex{length_macro_linewidth \convertto{pt}{\linewidth}}%
    \immediate\write\Output@ilatex{length_macro_columnwidth \convertto{pt}{\columnwidth}}%
    \immediate\write\Output@ilatex{length_macro_baselineskip \convertto{pt}{\baselineskip}}%
    \immediate\write\Output@ilatex{length_macro_parskip \convertto{pt}{\parskip}}%
    \immediate\write\Output@ilatex{length_macro_hsize \convertto{pt}{\hsize}}%
    \immediate\write\Output@ilatex{length_macro_vsize \convertto{pt}{\vsize}}%
    \immediate\write\Output@ilatex{length_unit_em \convertto{pt}{1em}}%
    \immediate\write\Output@ilatex{length_unit_ex \convertto{pt}{1ex}}%
    % End of the mapping
    \immediate\write\Output@ilatex{---}%
}


% Define a command to declare an interactive annotation
% It expects two arguments:
%   1. the type of content to map;
%   2. the code of the object to annotate.
%
% This command creates a PDF annotation of the same size
% than the element generated by the given code,
% and it writes the mapping between the unique identifier
% used in the annotation and the current location in the code
% in the dedicated output file (see \WriteMapToCurrentLine@ilatex).
\newcommand{\ilatex}[2]{%
    \WriteMapToCurrentLine@ilatex{#1}%
    \pdftooltip{{#2}}{ilatex-code-mapping-id-\theAnnotation@ilatex}%
    \stepcounter{Annotation@ilatex}%
}


% Define a custom includegraphics-like command
% which can be manipulated through ilatex.
\newcommand{\iincludegraphics}[2][]{%
    \ilatex{includegraphics}{\includegraphics[#1]{#2}}%
}


% Patch the \graphicspath command provided by the graphicx package
% to save the list of directories provided by the user (if any)
% into the \graphicspath@ilatex macro (defined below).
% By default, the macro points to the relative current directory.
\def\graphicspath@ilatex{.}
\apptocmd{\graphicspath}{\def\graphicspath@ilatex{#1}}


% Define a custom tabular-like environement
% which can be manipulated through ilatex.
\NewEnviron{itabular}[2][c]
{%
    % The \ilatex command seems to fail here,
    % so the PDF annotation is directly performed in here.
    %
    % The current value of the annotation counter is stored as text
    % beforehand to fix an expansion problem which seems to occur
    % when \theAnnotation@ilatex is used directly inside
    % the second argument of \pdftooltip.
    \let\CurrentAnnotationValue@ilatex\theAnnotation@ilatex%
    \pdftooltip{{%
    \begin{tabular}[#1]{#2}%
        \BODY
    \end{tabular}%
    }}{ilatex-code-mapping-id-\CurrentAnnotationValue@ilatex}%
    \stepcounter{Annotation@ilatex}%
}
{}

% Since the environ \NewEnviron command reads the full body
% of the environement before executing env. start code,
% the mapping to the beginning of the environement
% must be written in a different way to get the correct line number.
% Using a hook provided by the etoolbox package seems to work well!
\AtBeginEnvironment{itabular}{%
    \WriteMapToCurrentLine@ilatex{tabular}%
}

% Define a custom equation-like environement
% which can be manipulated through ilatex.
\NewEnviron{imaths}
{%
    \let\CurrentAnnotationValue@ilatex\theAnnotation@ilatex%
    \par\noindent
    \vspace{\abovedisplayskip}
    \pdftooltip{%
    \begin{minipage}{\linewidth}%
    \begin{equation*}%
        \BODY
    \end{equation*}%
    \end{minipage}%
    }{ilatex-code-mapping-id-\CurrentAnnotationValue@ilatex}%
    \stepcounter{Annotation@ilatex}%
    \vspace{\belowdisplayskip}
}
{}

\AtBeginEnvironment{imaths}{%
    \WriteMapToCurrentLine@ilatex{mathematics}%
}


\endinput